{"version":3,"sources":["images/boundaries.png","components/Sliders.js","components/TextPanel.js","helpers.js","components/Bars.js","components/Panel.js","App.js","reportWebVitals.js","index.js"],"names":["imgWidth","imgHeight","useStyles","makeStyles","theme","root","color","markLabel","vertical","height","horizontal","width","img","padding20","padding","divImg","backgroundImage","iris_chart","backgroundSize","centerDiv","textAlign","verticalAlign","rotate","writingMode","Sliders","props","length","updateLength","updateWidth","classes","range","start","stop","step","Array","Math","ceil","fill","map","x","y","val","value","label","Grid","container","className","direction","item","xs","justifyContent","alignItems","Slider","orientation","valueLabelDisplay","min","max","marks","maxWid","onChange","e","style","position","borderLeft","marginLeft","borderTop","marginTop","paddingTop","maxLen","TextPanel","mapIris","mapIrisShort","mapIrisColor","smallFont","fontSize","mediumFont","Bars","probas","spacing","proba","key","toFixed","borderColor","Panel","useState","currentValue","setCurrentValue","setLength","setWidth","useEffect","fetch","then","res","json","data","prediction","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b79cb20e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/boundaries.6c084dff.png\";","import React, { useEffect, useRef } from 'react'\nimport { Grid, makeStyles, Slider, Typography } from '@material-ui/core'\nimport \"../fonts.css\"\nimport iris_chart from \"../images/boundaries.png\"\n\n\nconst minWid = 0.0;\nconst maxWid = 3.5;\nconst minLen = 0.0;\nconst maxLen = 7.0;\nconst sliderStep = 0.1;\nconst imgWidth = 420;\nconst imgHeight = 210;\n\nconst factorWid = imgHeight / maxWid;\nconst factorLen = imgWidth / maxLen;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    color: '#ccc',\n  },\n  markLabel: {\n    // background: \"black\",\n    color: \"#ccc\"\n  },\n  vertical: {\n    height: imgHeight,\n  },\n  horizontal: {\n    width: imgWidth,\n  },\n  img: {\n    height: imgHeight,\n    width: imgWidth,\n    // padding: ' 0 0 12px'\n  },\n  padding20: {\n    padding: '20px 0 0 0'\n  },\n  divImg: {\n    height: imgHeight,\n    width: imgWidth,\n    backgroundImage: `url(${iris_chart})`,\n    backgroundSize: `${imgWidth}px ${imgHeight}px`\n  },\n  centerDiv: {\n    textAlign: \"center\",\n    verticalAlign: \"middle\"\n  },\n  rotate: {\n    // transform: \"rotate(-90deg)\",\n    writingMode: \"vertical-rl\"\n  }\n}));\n\nfunction Sliders(props) {\n  const { length, width, updateLength, updateWidth } = props;\n  const classes = useStyles();\n\n  const range = (start, stop, step = 1) =>\n    Array(Math.ceil((stop - start) / step))\n      .fill(start).map((x, y) => {\n        const val = x + y * step\n        return (\n          { value: val, label: `${val}` }\n        )\n      })\n\n  return (\n    <Grid\n      container\n      className={classes.root}\n      direction=\"column\"\n    >\n      {/* <Grid item>\n        <Grid container>\n          <Grid item xs={2}>\n            <div className=\"smallFont\">Width [cm]</div>\n          </Grid>\n          <Grid item >\n            <div />\n          </Grid>\n        </Grid>\n      </Grid> */}\n      <Grid item className={classes.vertical}>\n        <Grid container>\n          <Grid item xs={2}>\n            <Grid container\n              justifyContent=\"flex-end\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <div className={`${classes.rotate} smallFont`}>\n                  Petal Width\n                </div>\n              </Grid>\n              <Grid item className={classes.vertical}>\n                <Slider\n                  classes={{\n                    markLabel: classes.markLabel\n                  }}\n                  orientation=\"vertical\"\n                  valueLabelDisplay=\"on\"\n                  min={minWid}\n                  max={maxWid}\n                  step={sliderStep}\n                  value={width}\n                  marks={range(minWid, maxWid + 0.01, 1)}\n                  onChange={(e, val) => updateWidth(val)}\n                  // getAriaValueText={valuetext}\n                  aria-labelledby=\"discrete-slider\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <div className={classes.divImg}>\n              <div style={{\n                position: \"absolute\",\n                borderLeft: \"1px solid black\",\n                height: `${imgHeight}px`,\n                marginLeft: `${length * factorLen}px`\n              }} ></div>\n              <div style={{\n                position: \"absolute\",\n                borderTop: \"1px solid black\",\n                width: `${imgWidth}px`,\n                marginTop: `${imgHeight - width * factorWid}px`\n              }} ></div>\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container>\n          <Grid item xs={2}><div /></Grid>\n          {/* <Grid item className={`${classes.horizontal} ${classes.padding20}`}> */}\n          <Grid item style={{\n            width: \"420px\",\n            paddingTop: \"20px\"\n          }}>\n            <Slider\n              classes={{\n                markLabel: classes.markLabel\n              }}\n              min={minLen}\n              max={maxLen}\n              step={sliderStep}\n              value={length}\n              marks={range(minLen, maxLen + 0.01, 1)}\n              onChange={(e, val) => updateLength(val)}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"on\"\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container>\n          <Grid item xs={2}><div /></Grid>\n          <Grid item className={classes.horizontal}>\n            <div className={`${classes.centerDiv} smallFont`} >Petal Length [cm]</div>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid >\n  )\n}\n\nexport default Sliders\n","import React from 'react'\nimport { Grid } from '@material-ui/core';\nimport \"../fonts.css\"\n\nfunction TextPanel(props) {\n  const { length, width } = props;\n\n  return (\n    <div className=\"smallFont\">\n      <div>Petal length: {length}</div>\n      <div>Petal width: {width}</div>\n    </div>\n  )\n}\n\nexport default TextPanel;\n","export const mapIris = {\n  0: \"Iris Setosa\",\n  1: \"Iris Versicolour\",\n  2: \"Iris Virginica\"\n};\n\nexport const mapIrisShort = {\n  0: \"Setosa\",\n  1: \"Versicolour\",\n  2: \"Virginica\"\n};\n\nexport const mapIrisColor = {\n  0: \"#fafab0\",\n  1: \"#9898ff\",\n  2: \"#a0faa0\"\n};\n","import { Grid, makeStyles } from '@material-ui/core';\nimport React from 'react'\nimport { mapIrisColor, mapIrisShort } from '../helpers';\nimport \"../fonts.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  smallFont: {\n    fontSize: 'calc(6px + 2vmin)'\n  },\n  mediumFont: {\n    fontSize: 'calc(8px + 2vmin)'\n  }\n}));\n\nfunction Bars(props) {\n  const { probas } = props;\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      justifyContent=\"flex-start\"\n    >\n      {\n        probas.map((proba, key) => {\n          return (\n            <Grid item key={key} xs={2}>\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item>\n                  <div className=\"mediumFont\">{proba.toFixed(1)}%</div>\n                </Grid>\n                <Grid item>\n                  <Grid container spacing={0}\n                    direction=\"column\"\n                    alignItems=\"center\"\n                  >\n                    <div style={{\n                      borderLeft: \"20px solid grey\",\n                      height: 100 - proba + \"px\"\n                    }} ></div>\n                    <div style={{\n                      borderLeft: \"20px solid\",\n                      borderColor: mapIrisColor[key],\n                      height: proba + \"px\"\n                    }} ></div>\n                  </Grid>\n                </Grid>\n                <Grid item>\n                  <div className=\"mediumFont\">{mapIrisShort[key]}</div>\n                </Grid>\n              </Grid>\n            </Grid>\n          )\n        })\n      }\n    </Grid >\n  )\n}\n\nexport default Bars\n","import React from 'react'\nimport { useEffect, useState } from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Sliders from './Sliders';\nimport TextPanel from './TextPanel';\nimport Bars from './Bars';\nimport { mapIris, mapIrisColor } from '../helpers';\nimport \"../fonts.css\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: '30px',\n  },\n  vertical: {\n    height: 100,\n  },\n  horizontal: {\n    width: 300,\n    padding: '12px'\n  },\n}));\n\nfunction Panel() {\n  const classes = useStyles();\n  const [currentValue, setCurrentValue] = useState({\n    \"dot\": [],\n    \"probas\": []\n  })\n  const [length, setLength] = useState(2.1)\n  const [width, setWidth] = useState(1.1)\n\n  useEffect(() => {\n    fetch(`/api/predict/${length}/${width}`).then(res => res.json()).then(data => {\n      setCurrentValue(data)\n    })\n  }, [length, width])\n\n  const updatePredictions = () => {\n    fetch(`/api/predict/${length}/${width}`).then(res => res.json()).then(data => {\n      setCurrentValue(data)\n    })\n  }\n\n  const updateLength = (val) => {\n    setLength(val);\n    // updatePredictions();\n  }\n\n  const updateWidth = (val) => {\n    setWidth(val);\n    // updatePredictions();\n  }\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"flex-start\"\n      alignItems=\"stretch\"\n      spacing={3}\n      className={classes.root}\n    >\n      <Grid item>\n        <Bars probas={currentValue.probas} />\n      </Grid>\n      <Grid item>\n        <h2>\n          Prediction: <span style={{\n            color: `${mapIrisColor[currentValue.prediction]}`\n          }}>\n            {mapIris[currentValue.prediction]}\n          </span>\n        </h2>\n      </Grid>\n      <Grid item>\n        {/* <div className=\"smallFont\">Petal Width</div> */}\n        <Sliders\n          length={length}\n          width={width}\n          updateLength={setLength}\n          updateWidth={setWidth}\n        />\n      </Grid>\n      {/* <Grid item>\n        <TextPanel\n          length={length}\n          width={width}\n        />\n      </Grid> */}\n    </Grid>\n  )\n}\n\nexport default Panel\n","import './App.css';\nimport Panel from './components/Panel';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Panel />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}