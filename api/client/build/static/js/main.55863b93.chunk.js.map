{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mapPredictions","useStyles","makeStyles","theme","vertical","height","horizontal","width","margin","spacing","App","classes","useState","currentValue","setCurrentValue","length","setLength","setWidth","valuetext","value","useEffect","fetch","then","res","json","data","updatePredictions","className","Slider","orientation","valueLabelDisplay","min","max","step","onChange","e","val","updateWidth","getAriaValueText","updateLength","probas","map","i","toFixed","prediction","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAIMA,EAAiB,CACrB,EAAG,cACH,EAAG,kBACH,EAAG,kBAGCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,OAAQ,KAEVC,WAAY,CACVC,MAAO,KAETC,OAAQ,CACNH,OAAQF,EAAMM,QAAQ,QA6FXC,MAzFf,WACE,IAAMC,EAAUV,IAChB,EAAwCW,mBAAS,CAC/C,IAAO,GACP,OAAU,KAFZ,mBAAOC,EAAP,KAAqBC,EAArB,KAIA,EAA4BF,mBAAS,KAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,KAAnC,mBAAOL,EAAP,KAAcU,EAAd,KAEA,SAASC,EAAUC,GACjB,MAAM,GAAN,OAAUA,EAAV,MAGFC,qBAAU,WACRC,MAAM,gBAAD,OAAiBN,EAAjB,YAA2BR,IAASe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACpEX,EAAgBW,QAEjB,IAEH,IAAMC,EAAoB,WAExBL,MAAM,gBAAD,OAAiBN,EAAjB,YAA2BR,IAASe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GACpEX,EAAgBW,OAgBpB,OACE,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAWhB,EAAQH,SACxB,qBAAKmB,UAAWhB,EAAQP,SAAxB,SACE,cAACwB,EAAA,EAAD,aACEC,YAAY,WACZC,kBAAkB,KAClBC,IAAK,GACLC,IAAK,EACLC,KAAM,GACNd,MAAOZ,EACP2B,SAAU,SAACC,EAAGC,GAAJ,OAlBA,SAACA,GACnBnB,EAASmB,GACTV,IAgB8BW,CAAYD,IAClCE,iBAAkBpB,EAClB,kBAAgB,0BATlB,oBAUoB,WAGtB,qBAAKS,UAAWhB,EAAQH,SACxB,qBAAKmB,UAAWhB,EAAQL,WAAxB,SACE,cAACsB,EAAA,EAAD,aACEE,kBAAkB,KAClBC,IAAK,GACLC,IAAK,GACLC,KAAM,GACNd,MAAOJ,EACPmB,SAAU,SAACC,EAAGC,GAAJ,OAtCC,SAACA,GACpBpB,EAAUoB,GACVV,IAoC8Ba,CAAaH,IACnCE,iBAAkBpB,EAClB,kBAAgB,0BARlB,oBASoB,WAItB,gDAAmBH,KACnB,+CAAkBR,KAEhBM,EAAa2B,OAAOC,KAAI,SAACL,EAAKM,GAC5B,OACE,gCACG1C,EAAe0C,GADlB,KACwBN,EAAIO,QAAQ,GADpC,MAAUD,MAMhB,8CAAiB1C,EAAea,EAAa+B,qBC5FtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55863b93.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { makeStyles, Slider } from '@material-ui/core';\nimport './App.css';\n\nconst mapPredictions = {\n  0: \"Iris Setosa\",\n  1: \"Iris Versicolor\",\n  2: \"Iris Virginica\"\n}\n\nconst useStyles = makeStyles((theme) => ({\n  vertical: {\n    height: 200,\n  },\n  horizontal: {\n    width: 400,\n  },\n  margin: {\n    height: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [currentValue, setCurrentValue] = useState({\n    \"dot\": [],\n    \"probas\": []\n  })\n  const [length, setLength] = useState(2.1)\n  const [width, setWidth] = useState(1.1)\n\n  function valuetext(value) {\n    return `${value}cm`;\n  }\n\n  useEffect(() => {\n    fetch(`/api/predict/${length}/${width}`).then(res => res.json()).then(data => {\n      setCurrentValue(data)\n    })\n  }, [])\n\n  const updatePredictions = () => {\n    // console.log(typeof length, typeof width)\n    fetch(`/api/predict/${length}/${width}`).then(res => res.json()).then(data => {\n      setCurrentValue(data)\n    })\n  }\n\n  const updateLength = (val) => {\n    setLength(val);\n    updatePredictions();\n    // console.log(length, width)\n  }\n\n  const updateWidth = (val) => {\n    setWidth(val);\n    updatePredictions();\n    // console.log(length, width)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={classes.margin}></div>\n        <div className={classes.vertical}>\n          <Slider\n            orientation=\"vertical\"\n            valueLabelDisplay=\"on\"\n            min={0.1}\n            max={4.0}\n            step={0.1}\n            value={width}\n            onChange={(e, val) => updateWidth(val)}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            valueLabelDisplay=\"auto\"\n          />\n        </div>\n        <div className={classes.margin}></div>\n        <div className={classes.horizontal}>\n          <Slider\n            valueLabelDisplay=\"on\"\n            min={0.1}\n            max={10.0}\n            step={0.1}\n            value={length}\n            onChange={(e, val) => updateLength(val)}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-custom\"\n            valueLabelDisplay=\"auto\"\n          // marks={marks}\n          />\n        </div>\n        <h6>Petal length: {length}</h6>\n        <h6>Petal width: {width}</h6>\n        {\n          currentValue.probas.map((val, i) => {\n            return (\n              <div key={i}>\n                {mapPredictions[i]}: {val.toFixed(3)}%\n              </div>\n            )\n          })\n        }\n        <h2>Prediction: {mapPredictions[currentValue.prediction]}</h2>\n        {/* <button onClick={updatePredictions}>update</button> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}